angular.module("ng-halo",[]).directive("halo",function(){return{restrict:"EA",template:'<div class="ng-halo-holder"> <svg width="100%" height="100%" viewBox="0 0 42 42" class="">  <defs>   <filter id="dropshadow">   <feColorMatrix result="matrixOut" in="offOut" type="matrix" ng-attrvalues="{{ glowColor }}" />   <feGaussianBlur in="matrixOut" stdDeviation="0.8"/> <!-- stdDeviation is how much to blur -->   <feOffset dx="0" dy="0" result="offsetblur"/> <!-- how much to offset -->   <feMerge>        <feMergeNode/> <!-- this contains the offset blurred image -->       <feMergeNode in="SourceGraphic"/> <!-- this contains the element that the filter is applied to -->   </feMerge>   </filter>  </defs>  <circle class="donut-ring" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="#d2d3d4" stroke-width="{{ strokeWidth }}"></circle>  <circle class="donut-segment" cx="21" cy="21" r="15.91549430918954" fill="transparent" stroke="{{ strokeColor }}" stroke-width="{{ strokeWidth }}" stroke-dasharray="{{ progress }} {{ remainder }}" stroke-dashoffset="25" style="filter:url(#dropshadow)"></circle> </svg></div>',scope:{percentage:"=",strokeWidth:"=",strokeColor:"="},controller:["$scope","$element","$attrs","$timeout",function(e,t,r,o){var s,i=function(e){var t=/^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);return t?{r:parseInt(t[1],16),g:parseInt(t[2],16),b:parseInt(t[3],16)}:null},a=function(e){return(e.r/255).toFixed(2)+" 0 0 0 0 0 "+(e.g/255).toFixed(2)+" 0 0 0 0 0 "+(e.b/255).toFixed(2)+" 0 0 0 0 0 1 0"};e.glowColor=a(i(e.strokeColor)),e.progress=0,e.remainder=100,e.$watch("percentage",function(t){o.cancel(s),s=o(function(){e.progress=parseInt(t)<=100?parseInt(t):100,e.remainder=100-e.progress},100)})}]}});